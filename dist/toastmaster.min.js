(()=>{var __webpack_modules__={"./src/ToastMaster.js":(module,exports,__webpack_require__)=>{eval("var __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * ToastMaster.js - A lightweight, customizable modal, pricing, tags and toast notification library\r\n * \r\n * @version 2.0.0\r\n * @author SabbirSam\r\n * @license MIT\r\n */\n\n// Immediately Invoked Function Expression (IIFE) to avoid polluting the global scope\n(function () {\n  'use strict';\n\n  // Default options for the library\n  const DEFAULT_OPTIONS = {\n    // Basic content\n    title: false,\n    // Modal title\n    content: false,\n    // Modal content/message\n\n    // Buttons\n    ok: 'OK',\n    // OK button text\n    okColor: '#2980b9',\n    // OK button color\n    cancel: 'Cancel',\n    // Cancel button text\n    cancelColor: 'transparent',\n    // Cancel button color\n\n    // Appearance\n    icon: 'success',\n    // Icon type\n    iconColor: '#2980b9',\n    // Icon color\n    backdrop: 'rgba(0, 0, 0, 0.7)',\n    // Backdrop color\n    size: 'sm',\n    // Modal size\n    position: 'center',\n    // Modal position\n    animation: 'fadeIn',\n    // Animation type\n    darkMode: false,\n    // Dark mode toggle\n\n    // Behavior\n    backdropClose: true,\n    // Close on backdrop click\n    enterOk: false,\n    // Submit on Enter key\n    escClose: true,\n    // Close on Escape key\n    bodyClose: false,\n    // Close on modal body click\n    closeButton: true,\n    // Show close button\n    timeout: false,\n    // Auto-close timeout\n    progress: false,\n    // Show progress bar\n\n    // Custom classes\n    classes: {\n      modal: '',\n      icon: '',\n      content: '',\n      contentTitle: '',\n      contentText: '',\n      closeButton: '',\n      buttons: '',\n      ok: '',\n      cancel: '',\n      backdrop: '',\n      loading: '',\n      loadingText: '',\n      loadingSpinner: '',\n      progress: ''\n    }\n  };\n\n  // Icons for different states\n  const ICONS = {\n    success: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline></svg>`,\n    error: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line></svg>`,\n    warning: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>`,\n    info: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>`,\n    question: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>`,\n    loading: `<div class=\"tm-spinner\"><div></div><div></div><div></div><div></div></div>`\n  };\n\n  // Animation definitions\n  const ANIMATIONS = {\n    tilt: {\n      in: 'tm-animation-tilt-in',\n      out: 'tm-animation-tilt-out'\n    },\n    fadeIn: {\n      in: 'tm-animation-fade-in',\n      out: 'tm-animation-fade-out'\n    },\n    shakeY: {\n      in: 'tm-animation-shake-y',\n      out: 'tm-animation-fade-out'\n    },\n    shakeX: {\n      in: 'tm-animation-shake-x',\n      out: 'tm-animation-fade-out'\n    }\n  };\n\n  // Size definitions\n  const SIZES = {\n    sm: '300px',\n    md: '500px',\n    lg: '700px',\n    xl: '900px',\n    full: '100%'\n  };\n\n  // Position definitions\n  const POSITIONS = {\n    'center': {\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)'\n    },\n    'top': {\n      top: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'bottom': {\n      bottom: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'left': {\n      top: '50%',\n      left: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'right': {\n      top: '50%',\n      right: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'top-left': {\n      top: '30px',\n      left: '30px'\n    },\n    'top-right': {\n      top: '30px',\n      right: '30px'\n    },\n    'bottom-left': {\n      bottom: '30px',\n      left: '30px'\n    },\n    'bottom-right': {\n      bottom: '30px',\n      right: '30px'\n    },\n    'top-center': {\n      top: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'bottom-center': {\n      bottom: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'left-center': {\n      top: '50%',\n      left: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'right-center': {\n      top: '50%',\n      right: '30px',\n      transform: 'translateY(-50%)'\n    }\n  };\n\n  // Main ToastMaster class\n  class ToastMaster {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = this._mergeOptions(DEFAULT_OPTIONS, options);\n      this.currentModal = null; // Tracks currently open modal\n      this.timer = null; // Timeout timer\n      this.progressTimer = null; // Progress bar timer\n      this.isLoading = false; // Loading state\n      this._injectStyles(); // Inject CSS\n    }\n\n    /**\r\n     * Merge default options with user options\r\n     * \r\n     * @param {Object} defaultOptions - Default options\r\n     * @param {Object} userOptions - User options\r\n     * @returns {Object} - Merged options\r\n     */\n    _mergeOptions(defaultOptions, userOptions) {\n      const options = {\n        ...defaultOptions\n      };\n      for (const key in userOptions) {\n        if (key === 'classes' && userOptions.classes) {\n          options.classes = {\n            ...options.classes,\n            ...userOptions.classes\n          };\n        } else {\n          options[key] = userOptions[key];\n        }\n      }\n      return options;\n    }\n\n    /**\r\n     * Inject CSS styles into the document\r\n     */\n    _injectStyles() {\n      if (document.getElementById('toast-master-styles')) return;\n      const style = document.createElement('style');\n      style.id = 'toast-master-styles';\n      style.textContent = `\n        .tm-backdrop {\n          position: fixed;\n          top: 0;\n          left: 0;\n          width: 100%;\n          height: 100%;\n          z-index: 9999;\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n        \n        .tm-modal {\n          background-color: #fff;\n          border-radius: 8px;\n          box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n          overflow: hidden;\n          position: absolute;\n          max-width: 100%;\n          max-height: 90vh;\n          display: flex;\n          flex-direction: column;\n        }\n        \n        .tm-dark-mode {\n          background-color: #333;\n          color: #fff;\n        }\n        \n        .tm-dark-mode .tm-close-button {\n          color: #fff;\n        }\n        \n        .tm-icon-container {\n          display: flex;\n          justify-content: center;\n          padding: 20px 0 0;\n        }\n        \n        .tm-content {\n          padding: 20px;\n          text-align: center;\n          overflow-y: auto;\n        }\n        \n        .tm-title {\n          font-size: 20px;\n          font-weight: bold;\n          margin-bottom: 10px;\n        }\n        \n        .tm-message {\n          font-size: 16px;\n          margin-bottom: 10px;\n        }\n        \n        .tm-buttons {\n          display: flex;\n          justify-content: center;\n          padding: 15px;\n          gap: 10px;\n        }\n        \n        .tm-button {\n          padding: 8px 16px;\n          border-radius: 4px;\n          cursor: pointer;\n          border: none;\n          font-size: 14px;\n          font-weight: bold;\n          transition: opacity 0.2s;\n        }\n        \n        .tm-button:hover {\n          opacity: 0.8;\n        }\n        \n        .tm-ok-button {\n          color: white;\n        }\n        \n        .tm-cancel-button {\n          background-color: transparent;\n          border: 1px solid #ccc;\n        }\n        \n        .tm-close-button {\n          position: absolute;\n          top: 10px;\n          right: 10px;\n          cursor: pointer;\n          background: none;\n          border: none;\n          font-size: 20px;\n          color: #666;\n          padding: 0;\n          width: 24px;\n          height: 24px;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          line-height: 1;\n        }\n        \n        .tm-progress {\n          position: absolute;\n          top: 0;\n          left: 0;\n          height: 4px;\n          background-color: #2980b9;\n          width: 100%;\n          transform-origin: left center;\n          transform: scaleX(0);\n        }\n        \n        .tm-loading {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          padding: 30px;\n        }\n        \n        .tm-loading-text {\n          margin-top: 15px;\n          font-size: 16px;\n        }\n        \n        .tm-spinner {\n          display: inline-block;\n          position: relative;\n          width: 40px;\n          height: 40px;\n        }\n        \n        .tm-spinner div {\n          box-sizing: border-box;\n          display: block;\n          position: absolute;\n          width: 32px;\n          height: 32px;\n          margin: 4px;\n          border: 4px solid currentColor;\n          border-radius: 50%;\n          animation: tm-spinner 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n          border-color: currentColor transparent transparent transparent;\n        }\n        \n        .tm-spinner div:nth-child(1) {\n          animation-delay: -0.45s;\n        }\n        \n        .tm-spinner div:nth-child(2) {\n          animation-delay: -0.3s;\n        }\n        \n        .tm-spinner div:nth-child(3) {\n          animation-delay: -0.15s;\n        }\n        \n        @keyframes tm-spinner {\n          0% { transform: rotate(0deg); }\n          100% { transform: rotate(360deg); }\n        }\n        \n        /* Animation: Tilt */\n        .tm-animation-tilt-in {\n          animation: tm-tilt-in 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;\n        }\n        \n        .tm-animation-tilt-out {\n          animation: tm-tilt-out 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;\n        }\n        \n        @keyframes tm-tilt-in {\n          0% { transform: translateY(-50px) rotate(-8deg); opacity: 0; }\n          100% { transform: translateY(0) rotate(0); opacity: 1; }\n        }\n        \n        @keyframes tm-tilt-out {\n          0% { transform: translateY(0) rotate(0); opacity: 1; }\n          100% { transform: translateY(-50px) rotate(-8deg); opacity: 0; }\n        }\n        \n        /* Animation: Fade */\n        .tm-animation-fade-in {\n          animation: tm-fade-in 0.3s ease-in both;\n        }\n        \n        .tm-animation-fade-out {\n          animation: tm-fade-out 0.3s ease-out both;\n        }\n        \n        @keyframes tm-fade-in {\n          0% { opacity: 0; }\n          100% { opacity: 1; }\n        }\n        \n        @keyframes tm-fade-out {\n          0% { opacity: 1; }\n          100% { opacity: 0; }\n        }\n        \n        /* Animation: ShakeY */\n        .tm-animation-shake-y {\n          animation: tm-shake-y 0.5s cubic-bezier(.36,.07,.19,.97) both;\n        }\n        \n        @keyframes tm-shake-y {\n          0%, 100% { transform: translateY(0); }\n          10%, 30%, 50%, 70%, 90% { transform: translateY(-10px); }\n          20%, 40%, 60%, 80% { transform: translateY(10px); }\n        }\n        \n        /* Animation: ShakeX */\n        .tm-animation-shake-x {\n          animation: tm-shake-x 0.5s cubic-bezier(.36,.07,.19,.97) both;\n        }\n        \n        @keyframes tm-shake-x {\n          0%, 100% { transform: translateX(0); }\n          10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }\n          20%, 40%, 60%, 80% { transform: translateX(10px); }\n        }\n      `;\n\n      // Pricing modal styles\n      style.textContent += `\n        /* Pricing Modal Styles */\n        .tm-pricing-modal {\n          max-width: 900px !important;\n        }\n        \n        .tm-price-modal-container {\n          width: 100%;\n          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n        }\n        \n        .tm-price-modal-header {\n          text-align: center;\n          padding: 0 15px 15px;\n          position: relative;\n        }\n        \n        .tm-price-modal-header h2 {\n          margin: 0 0 10px;\n          font-size: 24px;\n          font-weight: 700;\n        }\n        \n        .tm-price-modal-header p {\n          margin: 0;\n          color: #6c757d;\n        }\n        \n        .tm-price-modal-toggle {\n          display: flex;\n          justify-content: center;\n          background-color: #f8f9fa;\n          border-radius: 30px;\n          padding: 5px;\n          margin: 15px auto;\n          max-width: 300px;\n        }\n        \n        .tm-price-modal-toggle button {\n          flex: 1;\n          border: none;\n          padding: 8px 16px;\n          border-radius: 30px;\n          background: transparent;\n          cursor: pointer;\n          position: relative;\n          font-weight: 500;\n          transition: all 0.2s;\n          color: #171717;\n        }\n        \n        .tm-price-modal-toggle button.active {\n          background-color: #fff;\n          box-shadow: 0 2px 10px rgba(0,0,0,0.1);\n        }\n        \n        .tm-price-modal-save {\n          position: absolute;\n          top: -12px;\n          right: -10px;\n          background-color: #28a745;\n          color: white;\n          font-size: 10px;\n          padding: 2px 6px;\n          border-radius: 10px;\n          font-weight: bold;\n        }\n        \n        .tm-price-modal-plans {\n          display: flex;\n          flex-wrap: wrap;\n          gap: 20px;\n          justify-content: center;\n          margin: 20px 0;\n        }\n        \n        .tm-price-modal-plan {\n          flex: 1;\n          min-width: 220px;\n          max-width: 280px;\n          background-color: #fff;\n          border-radius: 10px;\n          box-shadow: 0 5px 20px rgba(0,0,0,0.1);\n          padding: 20px;\n          position: relative;\n          transition: transform 0.3s;\n        }\n        \n        .tm-price-modal-plan:hover {\n          transform: translateY(-5px);\n        }\n        \n        .tm-price-modal-plan.recommended {\n          transform: scale(1.05);\n          border: 2px solid #007bff;\n        }\n        \n        .tm-price-modal-plan.recommended:hover {\n          transform: scale(1.05) translateY(-5px);\n        }\n        \n        .tm-price-modal-recommended {\n          position: absolute;\n          top: -12px;\n          left: 50%;\n          transform: translateX(-50%);\n          background-color: #007bff;\n          color: white;\n          padding: 4px 12px;\n          border-radius: 20px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n        \n        .tm-price-modal-tag {\n          position: absolute;\n          top: 20px;\n          right: -8px;\n          padding: 4px 12px;\n          color: white;\n          font-size: 12px;\n          font-weight: bold;\n          border-radius: 4px 0 0 4px;\n          box-shadow: 0 2px 5px rgba(0,0,0,0.2);\n        }\n        \n        .tm-price-modal-tag:after {\n          content: '';\n          position: absolute;\n          right: 0;\n          bottom: -8px;\n          border-top: 8px solid;\n          border-right: 8px solid transparent;\n          filter: brightness(70%);\n        }\n        \n        .tm-price-modal-plan h3 {\n          text-align: center;\n          margin: 0 0 15px;\n          font-size: 20px;\n          font-weight: 700;\n        }\n        \n        .tm-price-modal-price {\n          text-align: center;\n          margin-bottom: 20px;\n          position: relative;\n          padding: 10px 0;\n        }\n        \n        .tm-price-modal-original {\n          color: #dc3545;\n          text-decoration: line-through;\n          font-size: 14px;\n          opacity: 0.7;\n        }\n        \n        .tm-price-modal-discount {\n          position: absolute;\n          top: 0;\n          right: 30px;\n          background-color: #28a745;\n          color: white;\n          padding: 2px 6px;\n          border-radius: 10px;\n          font-size: 12px;\n          font-weight: bold;\n        }\n        \n        .tm-price-modal-current {\n          font-size: 28px;\n          font-weight: 700;\n          color: #333;\n        }\n        \n        .tm-price-modal-period {\n          color: #6c757d;\n          font-size: 14px;\n        }\n        \n        .tm-price-modal-features {\n          list-style: none;\n          padding: 0;\n          margin: 0 0 20px;\n        }\n        \n        .tm-price-modal-features li {\n          display: flex;\n          align-items: center;\n          margin-bottom: 10px;\n          color: #333;\n        }\n        \n        .tm-price-modal-features svg {\n          color: #28a745;\n          margin-right: 10px;\n          flex-shrink: 0;\n        }\n        \n        .tm-price-modal-select {\n          width: 100%;\n          padding: 10px 16px;\n          border: none;\n          border-radius: 6px;\n          background-color: #007bff;\n          color: white;\n          font-weight: 600;\n          cursor: pointer;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          gap: 8px;\n          transition: background-color 0.2s;\n        }\n        \n        .tm-price-modal-select:hover {\n          background-color: #0069d9;\n        }\n        \n        .tm-price-modal-guarantee {\n          display: flex;\n          align-items: center;\n          max-width: 500px;\n          margin: 20px auto;\n          padding: 15px;\n          background-color: #f8f9fa;\n          border-radius: 10px;\n        }\n        \n        .tm-price-modal-guarantee-badge {\n          background-color: #28a745;\n          color: white;\n          width: 40px;\n          height: 40px;\n          border-radius: 50%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          font-size: 16px;\n          font-weight: bold;\n          margin-right: 15px;\n          flex-shrink: 0;\n        }\n        \n        .tm-price-modal-guarantee-text h4 {\n          margin: 0 0 5px;\n          font-size: 16px;\n          font-weight: 600;\n        }\n        \n        .tm-price-modal-guarantee-text p {\n          margin: 0;\n          color: #6c757d;\n          font-size: 14px;\n        }\n        \n        @media (max-width: 768px) {\n          .tm-price-modal-plans {\n            flex-direction: column;\n            align-items: center;\n          }\n          \n          .tm-price-modal-plan {\n            width: 100%;\n            max-width: 320px;\n          }\n          \n          .tm-price-modal-plan.recommended {\n            order: -1;\n          }\n        }\n      `;\n\n      // Tag styles\n      style.textContent += `\n        /* Tag Styles */\n        .tm-tag {\n          display: inline-block;\n          padding: 2px 6px;\n          margin: 0 5px;\n          border-radius: 3px;\n          font-size: 12px;\n          font-weight: bold;\n          text-transform: uppercase;\n          letter-spacing: 0.5px;\n          vertical-align: middle;\n          white-space: nowrap;\n          line-height: 1.4;\n          user-select: none;\n          box-shadow: 0 1px 2px rgba(0,0,0,0.1);\n        }\n\n        /* Some predefined tag styles */\n        .tm-tag-pro {\n          background-color: #ff6b6b;\n          color: white;\n        }\n\n        .tm-tag-new {\n          background-color: #4ecdc4;\n          color: white;\n        }\n\n        .tm-tag-upcoming {\n          background-color: #a66efa;\n          color: white;\n        }\n\n        .tm-tag-beta {\n          background-color: #f39c12;\n          color: white;\n        }\n\n        .tm-tag-hot {\n          background-color: #e74c3c;\n          color: white;\n        }\n\n        .tm-tag-sale {\n          background-color: #3498db;\n          color: white;\n        }\n\n        .tm-tag-free {\n          background-color: #2ecc71;\n          color: white;\n        }\n      `;\n      document.head.appendChild(style);\n    }\n\n    /**\r\n     * Create and show a modal- The main method for creating and showing a modal\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    fire() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(resolve => {\n        // Close any existing modal\n        if (this.currentModal) {\n          this._close();\n        }\n\n        // Merge options\n        const modalOptions = this._mergeOptions(this.options, options);\n\n        // Create modal elements\n        const modal = this._createModal(modalOptions);\n        document.body.appendChild(modal.backdrop);\n\n        // Store current modal\n        this.currentModal = modal;\n\n        // Apply animation\n        this._applyAnimation(modal.modal, modalOptions.animation, 'in');\n\n        // Special handling for pricing modal\n        if (modalOptions.isPricingModal) {\n          this._setupPricingEvents(modal.modal, modalOptions, resolve);\n        } else {\n          // Standard event setup for regular modals\n          this._setupEvents(modal, modalOptions, resolve);\n        }\n\n        // Handle auto-close timer\n        if (modalOptions.timeout && typeof modalOptions.timeout === 'number') {\n          this._setupTimer(modal, modalOptions.timeout, resolve);\n        }\n      });\n    }\n\n    /**\r\n     * Create modal elements\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {Object} - Modal elements\r\n     */\n    _createModal(options) {\n      // Create backdrop\n      const backdrop = document.createElement('div');\n      backdrop.className = `tm-backdrop ${options.classes.backdrop || ''}`;\n      if (options.backdrop) {\n        backdrop.style.backgroundColor = options.backdrop;\n      }\n\n      // Create modal\n      const modal = document.createElement('div');\n      modal.className = `tm-modal ${options.classes.modal || ''} ${options.darkMode ? 'tm-dark-mode' : ''}`;\n\n      // Set size\n      const size = SIZES[options.size] || options.size;\n      modal.style.width = size;\n\n      // Set position\n      const position = POSITIONS[options.position] || POSITIONS.center;\n      for (const prop in position) {\n        modal.style[prop] = position[prop];\n      }\n\n      // Add content to modal\n      modal.innerHTML = this._getModalContent(options);\n\n      // Append modal to backdrop\n      backdrop.appendChild(modal);\n      return {\n        backdrop,\n        modal\n      };\n    }\n\n    /**\r\n     * Generate modal content HTML\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {String} - Modal content HTML\r\n     */\n    _getModalContent(options) {\n      let html = '';\n\n      // Add progress bar\n      if (options.progress) {\n        html += `<div class=\"tm-progress ${options.classes.progress || ''}\"></div>`;\n      }\n\n      // Add close button\n      if (options.closeButton) {\n        html += `<button class=\"tm-close-button ${options.classes.closeButton || ''}\">&times;</button>`;\n      }\n\n      // If loading is active, show loading content\n      if (this.isLoading) {\n        html += `\n          <div class=\"tm-loading ${options.classes.loading || ''}\">\n            ${ICONS.loading}\n            <div class=\"tm-loading-text ${options.classes.loadingText || ''}\">${typeof options.loadingText === 'string' ? options.loadingText : 'Please wait...'}</div>\n          </div>\n        `;\n        return html;\n      }\n\n      // Add icon\n      if (options.icon) {\n        html += `\n          <div class=\"tm-icon-container ${options.classes.icon || ''}\">\n            <div style=\"color: ${options.iconColor}\">\n              ${this._getIcon(options.icon)}\n            </div>\n          </div>\n        `;\n      }\n\n      // Add content\n      if (options.title || options.content) {\n        html += `<div class=\"tm-content ${options.classes.content || ''}\">`;\n        if (options.title) {\n          html += `<div class=\"tm-title ${options.classes.contentTitle || ''}\">${options.title}</div>`;\n        }\n        if (options.content) {\n          html += `<div class=\"tm-message ${options.classes.contentText || ''}\">${options.content}</div>`;\n        }\n        html += '</div>';\n      }\n\n      // Add buttons\n      if (options.ok || options.cancel) {\n        html += `<div class=\"tm-buttons ${options.classes.buttons || ''}\">`;\n        if (options.cancel) {\n          html += `\n            <button class=\"tm-button tm-cancel-button ${options.classes.cancel || ''}\" \n                    style=\"color: ${options.cancelColor === 'transparent' ? '#333' : '#fff'}; background-color: ${options.cancelColor};\">\n              ${options.cancel}\n            </button>\n          `;\n        }\n        if (options.ok) {\n          html += `\n            <button class=\"tm-button tm-ok-button ${options.classes.ok || ''}\" \n                    style=\"background-color: ${options.okColor}\">\n              ${options.ok}\n            </button>\n          `;\n        }\n        html += '</div>';\n      }\n      return html;\n    }\n\n    /**\r\n     * Get icon HTML\r\n     * \r\n     * @param {String} icon - Icon type or SVG string\r\n     * @returns {String} - Icon HTML\r\n     */\n    _getIcon(icon) {\n      // Check if it's a predefined icon\n      if (ICONS[icon]) {\n        return ICONS[icon];\n      }\n\n      // Check if it's an SVG string\n      if (icon.trim().startsWith('<svg')) {\n        return icon;\n      }\n\n      // Check if it's an image URL\n      if (icon.match(/\\.(jpeg|jpg|gif|png|svg)$/) || icon.startsWith('data:image')) {\n        return `<img src=\"${icon}\" alt=\"Icon\" style=\"max-width: 80px; max-height: 80px;\">`;\n      }\n\n      // Default to info icon\n      return ICONS.info;\n    }\n\n    /**\r\n     * Set up event listeners for modal\r\n     * \r\n     * @param {Object} modal - Modal elements\r\n     * @param {Object} options - Modal options\r\n     * @param {Function} resolve - Promise resolve function\r\n     */\n    _setupEvents(modal, options, resolve) {\n      // Close button click\n      if (options.closeButton) {\n        const closeButton = modal.modal.querySelector('.tm-close-button');\n        if (closeButton) {\n          closeButton.addEventListener('click', () => {\n            this._close();\n            resolve({\n              close: true\n            });\n          });\n        }\n      }\n\n      // Backdrop click\n      if (options.backdropClose && options.backdrop) {\n        modal.backdrop.addEventListener('click', e => {\n          if (e.target === modal.backdrop) {\n            this._close();\n            resolve({\n              close: true\n            });\n          }\n        });\n      }\n\n      // Body click\n      if (options.bodyClose) {\n        modal.modal.addEventListener('click', () => {\n          this._close();\n          resolve({\n            close: true\n          });\n        });\n      }\n\n      // ESC key press\n      if (options.escClose) {\n        const escHandler = e => {\n          if (e.key === 'Escape') {\n            this._close();\n            resolve({\n              close: true\n            });\n            document.removeEventListener('keydown', escHandler);\n          }\n        };\n        document.addEventListener('keydown', escHandler);\n      }\n\n      // Enter key press\n      if (options.enterOk) {\n        const enterHandler = e => {\n          if (e.key === 'Enter') {\n            this._close();\n            resolve({\n              ok: true\n            });\n            document.removeEventListener('keydown', enterHandler);\n          }\n        };\n        document.addEventListener('keydown', enterHandler);\n      }\n\n      // OK button click\n      const okButton = modal.modal.querySelector('.tm-ok-button');\n      if (okButton) {\n        okButton.addEventListener('click', () => {\n          this._close();\n          resolve({\n            ok: true\n          });\n        });\n      }\n\n      // Cancel button click\n      const cancelButton = modal.modal.querySelector('.tm-cancel-button');\n      if (cancelButton) {\n        cancelButton.addEventListener('click', () => {\n          this._close();\n          resolve({\n            cancel: true\n          });\n        });\n      }\n    }\n\n    /**\r\n     * Set up pricing modal event handlers - FIXED VERSION\r\n     * \r\n     * @param {HTMLElement} modalElement - Modal element\r\n     * @param {Object} options - Pricing options\r\n     * @param {Function} resolve - Promise resolve function\r\n     */\n    _setupPricingEvents(modalElement, options, resolve) {\n      console.log(\"Setting up pricing events\", options);\n      if (options.closeButton) {\n        const closeButton = modalElement.querySelector('.tm-close-button');\n        if (closeButton) {\n          closeButton.addEventListener('click', () => {\n            this._close();\n            resolve({\n              close: true\n            });\n          });\n        }\n      }\n\n      // Backdrop click\n      if (options.backdropClose && options.backdrop && modalElement.parentElement) {\n        modalElement.parentElement.addEventListener('click', e => {\n          if (e.target === modalElement.parentElement) {\n            this._close();\n            resolve({\n              close: true\n            });\n          }\n        });\n      }\n\n      // Body click\n      if (options.bodyClose) {\n        modalElement.addEventListener('click', () => {\n          this._close();\n          resolve({\n            close: true\n          });\n        });\n      }\n\n      // ESC key press\n      if (options.escClose) {\n        const escHandler = e => {\n          if (e.key === 'Escape') {\n            this._close();\n            resolve({\n              close: true\n            });\n            document.removeEventListener('keydown', escHandler);\n          }\n        };\n        document.addEventListener('keydown', escHandler);\n      }\n\n      // Get the toggle buttons\n      const toggleButtons = modalElement.querySelectorAll('.tm-price-modal-toggle button');\n\n      // Define a function that updates prices based on selected toggle\n      const updatePrices = selectedToggle => {\n        console.log(\"Updating prices for toggle:\", selectedToggle);\n\n        // Make sure we have plans data\n        if (!options.plans || !Array.isArray(options.plans)) {\n          console.error(\"Plans data is missing or invalid\");\n          return;\n        }\n        options.plans.forEach(plan => {\n          // Make sure we have prices for this toggle option\n          const prices = plan.prices?.[selectedToggle];\n          if (!prices) {\n            console.error(`No prices found for plan ${plan.name} with toggle ${selectedToggle}`);\n            return;\n          }\n\n          // Find the plan element using the plan name\n          const planElement = modalElement.querySelector(`.tm-price-modal-plan[data-plan=\"${plan.name}\"]`);\n          if (!planElement) {\n            console.error(`Plan element not found for ${plan.name}`);\n            return;\n          }\n\n          // Now update the pricing elements\n          const originalPrice = planElement.querySelector('.tm-price-modal-original');\n          const discountEl = planElement.querySelector('.tm-price-modal-discount');\n          const currentPrice = planElement.querySelector('.tm-price-modal-current');\n          const periodEl = planElement.querySelector('.tm-price-modal-period');\n\n          // Calculate discount if applicable\n          const discount = prices.original && prices.current && prices.original !== prices.current ? Math.round((1 - prices.current / prices.original) * 100) : 0;\n\n          // Update original price display\n          if (originalPrice) {\n            if (discount > 0) {\n              originalPrice.textContent = `$${prices.original.toFixed(2)}`;\n              originalPrice.style.display = 'block';\n            } else {\n              originalPrice.style.display = 'none';\n            }\n          }\n\n          // Update discount display\n          if (discountEl) {\n            if (discount > 0) {\n              discountEl.textContent = `-${discount}%`;\n              discountEl.style.display = 'inline-block';\n            } else {\n              discountEl.style.display = 'none';\n            }\n          }\n\n          // Always update the current price and period\n          if (currentPrice && prices.current) {\n            currentPrice.textContent = `$${prices.current.toFixed(2)}`;\n          }\n          if (periodEl && prices.period) {\n            periodEl.textContent = prices.period;\n          }\n        });\n      };\n\n      // Add click event to each toggle button\n      toggleButtons.forEach(button => {\n        console.log(\"Setting up toggle button:\", button.textContent);\n        button.addEventListener('click', event => {\n          // Prevent default button behavior\n          event.preventDefault();\n          console.log(\"Toggle button clicked:\", button.textContent);\n\n          // Remove active class from all buttons\n          toggleButtons.forEach(btn => btn.classList.remove('active'));\n\n          // Add active class to clicked button\n          button.classList.add('active');\n\n          // Get selected toggle value\n          const selectedToggle = button.getAttribute('data-toggle');\n          console.log(\"Selected toggle:\", selectedToggle);\n\n          // Update all prices based on the selected toggle\n          updatePrices(selectedToggle);\n        });\n      });\n\n      // Set up \"Upgrade Now\" buttons\n      const selectButtons = modalElement.querySelectorAll('.tm-price-modal-select');\n      console.log(\"Found select buttons:\", selectButtons.length);\n      selectButtons.forEach(button => {\n        button.addEventListener('click', event => {\n          console.log(\"Select button clicked\");\n\n          // Prevent default button behavior\n          event.preventDefault();\n\n          // Get plan name and URL from button attributes\n          const planName = button.getAttribute('data-plan');\n          const url = button.getAttribute('data-url');\n          console.log(\"Plan:\", planName, \"URL:\", url);\n\n          // Get the currently active toggle\n          const activeToggle = modalElement.querySelector('.tm-price-modal-toggle button.active');\n          const selectedToggle = activeToggle ? activeToggle.getAttribute('data-toggle') : null;\n\n          // Handle URL navigation if provided\n          if (url && url !== '#') {\n            console.log(\"Navigating to:\", url);\n            window.location.href = url;\n          }\n\n          // Find the selected plan in options\n          const selectedPlan = options.plans.find(p => p.name === planName);\n          if (selectedPlan && selectedPlan.button && selectedPlan.button.callback && typeof selectedPlan.button.callback === 'function') {\n            console.log(\"Calling plan callback\");\n            selectedPlan.button.callback({\n              plan: selectedPlan,\n              toggle: selectedToggle,\n              prices: selectedToggle ? selectedPlan.prices[selectedToggle] : null\n            });\n          }\n\n          // Close the modal and resolve the promise\n          this._close();\n          resolve({\n            plan: planName,\n            selectedToggle: selectedToggle\n          });\n        });\n      });\n\n      // Make sure pricing is initialized correctly with the default active toggle\n      const activeToggle = modalElement.querySelector('.tm-price-modal-toggle button.active');\n      if (activeToggle) {\n        const selectedToggle = activeToggle.getAttribute('data-toggle');\n        console.log(\"Initializing with active toggle:\", selectedToggle);\n        updatePrices(selectedToggle);\n      }\n    }\n\n    /**\r\n     * Set up auto-close timer and progress bar\r\n     * \r\n     * @param {Object} modal - Modal elements\r\n     * @param {Number} timeout - Timeout in milliseconds\r\n     * @param {Function} resolve - Promise resolve function\r\n     */\n    _setupTimer(modal, timeout, resolve) {\n      this.timer = setTimeout(() => {\n        this._close();\n        resolve({\n          timeout: true\n        });\n      }, timeout);\n\n      // Set up progress bar if enabled\n      const progressBar = modal.modal.querySelector('.tm-progress');\n      if (progressBar) {\n        progressBar.style.transition = `transform ${timeout}ms linear`;\n\n        // Use requestAnimationFrame to ensure the initial state is rendered\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            progressBar.style.transform = 'scaleX(1)';\n          });\n        });\n      }\n    }\n\n    /**\r\n     * Apply animation to modal\r\n     * \r\n     * @param {HTMLElement} element - Element to animate\r\n     * @param {String} animationName - Animation name\r\n     * @param {String} direction - Animation direction ('in' or 'out')\r\n     */\n    _applyAnimation(element, animationName, direction) {\n      if (!animationName) return;\n      const animation = ANIMATIONS[animationName] || ANIMATIONS.tilt;\n      element.classList.add(animation[direction]);\n      element.addEventListener('animationend', () => {\n        element.classList.remove(animation[direction]);\n      }, {\n        once: true\n      });\n    }\n\n    /**\r\n     * Close the current modal\r\n     */\n    _close() {\n      if (!this.currentModal) return;\n      const {\n        backdrop,\n        modal\n      } = this.currentModal;\n\n      // Clear timers\n      if (this.timer) {\n        clearTimeout(this.timer);\n        this.timer = null;\n      }\n      if (this.progressTimer) {\n        clearTimeout(this.progressTimer);\n        this.progressTimer = null;\n      }\n\n      // Apply exit animation\n      const animationName = this.options.animation;\n      if (animationName) {\n        this._applyAnimation(modal, animationName, 'out');\n        modal.addEventListener('animationend', () => {\n          document.body.removeChild(backdrop);\n        }, {\n          once: true\n        });\n      } else {\n        document.body.removeChild(backdrop);\n      }\n      this.currentModal = null;\n      this.isLoading = false;\n    }\n\n    /**\r\n     * Show pricing modal\r\n     * \r\n     * @param {Object} options - Pricing modal options\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    price() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const defaultOptions = {\n        title: '🚀 Hello its a pricing modal',\n        toggles: {\n          options: ['Monthly', 'Yearly', 'Lifetime'],\n          active: 'Yearly',\n          savings: {\n            'Yearly': 'Save 20%',\n            'Lifetime': 'Save 80%'\n          }\n        },\n        plans: [{\n          name: 'Basic',\n          prices: {\n            'Monthly': {\n              original: 12.99,\n              current: 12.99,\n              period: '/month'\n            },\n            'Yearly': {\n              original: 155.88,\n              current: 129.90,\n              period: '/year'\n            },\n            'Lifetime': {\n              original: 155.88,\n              current: 30.49,\n              period: '/lifetime'\n            }\n          },\n          features: ['All Basic features', 'WooCommerce packages', 'Advanced security packages'],\n          button: {\n            text: 'Upgrade Now',\n            url: '#',\n            callback: null\n          },\n          tag: null\n        }],\n        guarantee: {\n          days: 14,\n          title: '14-Day Money-Back Guarantee',\n          text: 'Try it risk-free.'\n        },\n        recommended: 'Pro',\n        closeButton: true,\n        size: 'xl',\n        classes: {\n          modal: '',\n          toggle: '',\n          plans: '',\n          plan: '',\n          guarantee: ''\n        }\n      };\n\n      // Merge user options with defaults\n      const config = this._mergeOptions(defaultOptions, options);\n\n      // Generate HTML content for the pricing modal\n      const content = this._generatePricingModalContent(config);\n\n      // Return the modal using the main fire method, flagging it as a pricing modal\n      return this.fire({\n        content: content,\n        icon: false,\n        ok: false,\n        cancel: false,\n        backdrop: 'rgba(0, 0, 0, 0.7)',\n        animation: 'fadeIn',\n        size: config.size,\n        closeButton: config.closeButton,\n        classes: {\n          modal: `tm-pricing-modal ${config.classes.modal || ''}`,\n          content: 'tm-pricing-content'\n        },\n        isPricingModal: true,\n        // Flag to identify this as a pricing modal\n        plans: config.plans,\n        // Pass the plans to the modal\n        toggles: config.toggles // Pass the toggles to the modal\n      });\n    }\n\n    /**\r\n     * Generate HTML content for pricing modal\r\n     * \r\n     * @param {Object} config - Pricing configuration\r\n     * @returns {String} - HTML content\r\n     */\n    _generatePricingModalContent(config) {\n      let html = `\n        <div class=\"tm-price-modal-container\">\n          <div class=\"tm-price-modal-header\">\n            <h2>${config.title}</h2>\n            ${config.subtitle ? `<p>${config.subtitle}</p>` : ''}\n          </div>\n      `;\n\n      // Add toggle options if provided\n      if (config.toggles && config.toggles.options.length > 1) {\n        html += `<div class=\"tm-price-modal-toggle ${config.classes.toggle || ''}\">`;\n        config.toggles.options.forEach(toggle => {\n          const isActive = toggle === config.toggles.active;\n          const savings = config.toggles.savings?.[toggle] || '';\n          html += `\n            <button class=\"${isActive ? 'active' : ''}\" data-toggle=\"${toggle}\">\n              ${toggle}${savings ? `<span class=\"tm-price-modal-save\">${savings}</span>` : ''}\n            </button>\n          `;\n        });\n        html += `</div>`;\n      }\n\n      // Add pricing plans\n      html += `<div class=\"tm-price-modal-plans ${config.classes.plans || ''}\">`;\n      config.plans.forEach(plan => {\n        const isRecommended = plan.name === config.recommended;\n        const prices = plan.prices[config.toggles.active] || {};\n        const discount = prices.original !== prices.current ? Math.round((1 - prices.current / prices.original) * 100) : 0;\n        html += `\n          <div class=\"tm-price-modal-plan ${config.classes.plan || ''} ${isRecommended ? 'recommended' : ''}\" data-plan=\"${plan.name}\">\n            ${isRecommended ? '<div class=\"tm-price-modal-recommended\">MOST POPULAR</div>' : ''}\n            ${plan.tag ? this._generateTag(plan.tag) : ''}\n            <h3>${plan.name}</h3>\n            <div class=\"tm-price-modal-price\">\n              ${prices.original !== prices.current ? `<div class=\"tm-price-modal-original\">$${prices.original.toFixed(2)}</div>` : ''}\n              ${discount > 0 ? `<div class=\"tm-price-modal-discount\">-${discount}%</div>` : ''}\n              <div class=\"tm-price-modal-current\">$${prices.current.toFixed(2)}</div>\n              <div class=\"tm-price-modal-period\">${prices.period}</div>\n            </div>\n            <ul class=\"tm-price-modal-features\">\n              ${plan.features.map(feature => `\n                <li>\n                  <svg class=\"check-icon\" viewBox=\"0 0 512 512\" width=\"1em\" height=\"1em\">\n                    <path d=\"M173.898 439.404l-166.4-166.4c-9.997-9.997-9.997-26.206 0-36.204l36.203-36.204c9.997-9.998 26.207-9.998 36.204 0L192 312.69 432.095 72.596c9.997-9.997 26.207-9.997 36.204 0l36.203 36.204c9.997 9.997 9.997 26.206 0 36.204l-294.4 294.401c-9.998 9.997-26.207 9.997-36.204-.001z\"></path>\n                  </svg>\n                  ${feature}\n                </li>\n              `).join('')}\n            </ul>\n            <button class=\"tm-price-modal-select\" data-plan=\"${plan.name}\" ${plan.button.url ? `data-url=\"${plan.button.url}\"` : ''}>\n              ${plan.button.text} \n              <svg class=\"arrow-icon\" viewBox=\"0 0 448 512\" width=\"1em\" height=\"1em\">\n                <path d=\"M190.5 66.9l22.2-22.2c9.4-9.4 24.6-9.4 33.9 0L441 239c9.4 9.4 9.4 24.6 0 33.9L246.6 467.3c-9.4 9.4-24.6 9.4-33.9 0l-22.2-22.2c-9.5-9.5-9.3-25 .4-34.3L311.4 296H24c-13.3 0-24-10.7-24-24v-32c0-13.3 10.7-24 24-24h287.4L190.9 101.2c-9.8-9.3-10-24.8-.4-34.3z\"></path>\n              </svg>\n            </button>\n          </div>\n        `;\n      });\n      html += `</div>`;\n\n      // Add guarantee if provided\n      if (config.guarantee) {\n        html += `\n          <div class=\"tm-price-modal-guarantee ${config.classes.guarantee || ''}\">\n            <div class=\"tm-price-modal-guarantee-badge\">${config.guarantee.days}</div>\n            <div class=\"tm-price-modal-guarantee-text\">\n              <h4>${config.guarantee.title}</h4>\n              <p>${config.guarantee.text}</p>\n            </div>\n          </div>\n        `;\n      }\n      html += `</div>`;\n      return html;\n    }\n\n    /**\r\n     * Generate HTML for tags (PRO, NEW, UPCOMING)\r\n     * \r\n     * @param {String|Object} tag - Tag configuration\r\n     * @returns {String} - HTML content\r\n     */\n    _generateTag(tag) {\n      let tagType, text, color;\n      if (typeof tag === 'string') {\n        tagType = tag.toLowerCase();\n        text = tag.toUpperCase();\n\n        // Default colors for predefined tags\n        switch (tagType) {\n          case 'pro':\n            color = '#ff6b6b';\n          case 'new':\n            color = '#4ecdc4';\n          case 'upcoming':\n            color = '#a66efa';\n          case 'beta':\n            color = '#f39c12';\n          case 'hot':\n            color = '#e74c3c';\n          case 'sale':\n            color = '#3498db';\n          case 'free':\n            color = '#2ecc71';\n          default:\n            color = '#6c757d';\n        }\n      } else {\n        tagType = tag.type || 'custom';\n        text = tag.text || 'CUSTOM';\n        color = tag.color || '#6c757d';\n      }\n      return `\n        <div class=\"tm-price-modal-tag tm-tag-${tagType}\" style=\"background-color: ${color}\">\n          ${text}\n        </div>\n      `;\n    }\n\n    /**\r\n     * Create a tag that can be used in pricing plans or elsewhere\r\n     * \r\n     * @param {String|Object} type - Tag type ('pro', 'new', 'upcoming', or custom) or tag configuration object\r\n     * @param {String} text - Tag text (optional)\r\n     * @param {String|Object} color - Tag color or options object (optional)\r\n     * @returns {Object} - Tag configuration for use in price modal or elsewhere\r\n     */\n    tag(type) {\n      let text = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      let color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      // Handle different parameter formats\n      let tagConfig = {};\n      let options = {};\n      if (typeof type === 'object') {\n        // If first parameter is an object, use it as the full configuration\n        tagConfig = type;\n        options = text || {};\n      } else {\n        // Build basic tag configuration\n        tagConfig = {\n          type: type || 'custom',\n          text: text || type.toUpperCase(),\n          color: ''\n        };\n\n        // Handle the color/options parameter\n        if (typeof color === 'object') {\n          options = color;\n          tagConfig.color = options.color || this._getDefaultTagColor(tagConfig.type);\n        } else {\n          tagConfig.color = color || this._getDefaultTagColor(tagConfig.type);\n          options = {};\n        }\n      }\n\n      // If no rendering options are provided, just return the tag config for use in price modal\n      if (!options.selector && !options.target) {\n        return tagConfig;\n      }\n\n      // Otherwise, render the tag as an HTML element\n      return this._renderTag(tagConfig, options);\n    }\n\n    /**\r\n     * Render a tag as an HTML element\r\n     * \r\n     * @param {Object} tagConfig - Tag configuration\r\n     * @param {Object} options - Rendering options\r\n     * @returns {HTMLElement} - The created tag element\r\n     * @private\r\n     */\n    _renderTag(tagConfig) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // Default options for rendering\n      const defaultOptions = {\n        target: null,\n        // DOM element to append the tag to\n        prepend: false,\n        // Whether to prepend or append the tag\n        position: 'after',\n        // Position relative to selector: 'before', 'after', 'append', 'prepend'\n        selector: null,\n        // CSS selector to find the target element\n        textColor: '#fff',\n        // Text color\n        borderRadius: '3px',\n        // Border radius\n        padding: '2px 6px',\n        // Padding\n        fontSize: '12px',\n        // Font size\n        fontWeight: 'bold',\n        // Font weight\n        margin: '0 5px',\n        // Margin\n        display: 'inline-block',\n        // Display property\n        className: '',\n        // Additional class names\n        style: {} // Additional inline styles\n      };\n\n      // Merge options\n      const finalOptions = {\n        ...defaultOptions,\n        ...options\n      };\n\n      // Create the tag element\n      const tagElement = document.createElement('span');\n      tagElement.className = `tm-tag tm-tag-${tagConfig.type.toLowerCase()} ${finalOptions.className}`;\n      tagElement.textContent = tagConfig.text;\n\n      // Apply styles\n      const styles = {\n        backgroundColor: tagConfig.color,\n        color: finalOptions.textColor,\n        borderRadius: finalOptions.borderRadius,\n        padding: finalOptions.padding,\n        fontSize: finalOptions.fontSize,\n        fontWeight: finalOptions.fontWeight,\n        margin: finalOptions.margin,\n        display: finalOptions.display,\n        ...finalOptions.style\n      };\n      Object.keys(styles).forEach(key => {\n        if (styles[key]) {\n          tagElement.style[key] = styles[key];\n        }\n      });\n\n      // Handle rendering to DOM if requested\n      if (finalOptions.selector) {\n        const targetEl = document.querySelector(finalOptions.selector);\n        if (targetEl) {\n          if (finalOptions.position === 'before') {\n            targetEl.parentNode.insertBefore(tagElement, targetEl);\n          } else if (finalOptions.position === 'after') {\n            if (targetEl.nextSibling) {\n              targetEl.parentNode.insertBefore(tagElement, targetEl.nextSibling);\n            } else {\n              targetEl.parentNode.appendChild(tagElement);\n            }\n          } else if (finalOptions.position === 'prepend') {\n            targetEl.insertBefore(tagElement, targetEl.firstChild);\n          } else {\n            // Default to append\n            targetEl.appendChild(tagElement);\n          }\n        }\n      } else if (finalOptions.target && finalOptions.target instanceof HTMLElement) {\n        if (finalOptions.prepend) {\n          finalOptions.target.insertBefore(tagElement, finalOptions.target.firstChild);\n        } else {\n          finalOptions.target.appendChild(tagElement);\n        }\n      }\n      return tagElement;\n    }\n\n    /**\r\n     * Get default color for predefined tag types\r\n     * \r\n     * @param {String} type - Tag type\r\n     * @returns {String} - Default color for the tag type\r\n     * @private\r\n     */\n    _getDefaultTagColor(type) {\n      switch (type.toLowerCase()) {\n        case 'pro':\n          return '#ff6b6b';\n        case 'new':\n          return '#4ecdc4';\n        case 'upcoming':\n          return '#a66efa';\n        case 'beta':\n          return '#f39c12';\n        case 'hot':\n          return '#e74c3c';\n        case 'sale':\n          return '#3498db';\n        case 'free':\n          return '#2ecc71';\n        default:\n          return '#6c757d';\n      }\n    }\n\n    /**\r\n     * Show or hide loading indicator\r\n     * \r\n     * @param {Boolean|String} state - Loading state or loading text\r\n     * @returns {ToastMaster} - ToastMaster instance for chaining\r\n     */\n    loading() {\n      let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.isLoading = state !== false && state !== null && state !== 0;\n      let loadingText = 'Please wait...';\n      if (typeof state === 'string') {\n        loadingText = state;\n      }\n      if (this.isLoading) {\n        return this.fire({\n          title: false,\n          content: false,\n          icon: false,\n          ok: false,\n          cancel: false,\n          closeButton: false,\n          loadingText: loadingText\n        });\n      } else if (this.currentModal) {\n        this._close();\n      }\n      return this;\n    }\n\n    /**\r\n     * Show success modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {Number|Object} options - Auto-close timeout or configuration object\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    success() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4000;\n      const config = {\n        title: title,\n        icon: 'success',\n        iconColor: '#28a745',\n        ok: false,\n        cancel: false,\n        progress: true\n      };\n      if (typeof options === 'number' || options === false) {\n        // Legacy behavior: options is just the timeout\n        config.timeout = options;\n      } else if (typeof options === 'object') {\n        // New behavior: options is a configuration object\n        Object.assign(config, options);\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Show error modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    error() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const config = {\n        title: title,\n        icon: 'error',\n        iconColor: '#dc3545',\n        ok: 'OK',\n        okColor: '#dc3545',\n        cancel: false\n      };\n      if (typeof content === 'object') {\n        // content is a configuration object\n        Object.assign(config, content);\n      } else {\n        // content is just a string\n        config.content = content;\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Show warning modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    warn() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const config = {\n        title: title,\n        icon: 'warning',\n        iconColor: '#ffc107',\n        ok: 'OK',\n        okColor: '#ffc107',\n        cancel: false\n      };\n      if (typeof content === 'object') {\n        // content is a configuration object\n        Object.assign(config, content);\n      } else {\n        // content is just a string\n        config.content = content;\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Show info modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    info() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const config = {\n        title: title,\n        icon: 'info',\n        iconColor: '#17a2b8',\n        ok: 'OK',\n        okColor: '#17a2b8',\n        cancel: false\n      };\n      if (typeof content === 'object') {\n        // content is a configuration object\n        Object.assign(config, content);\n      } else {\n        // content is just a string\n        config.content = content;\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Show question modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    ask() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const config = {\n        title: title,\n        icon: 'question',\n        iconColor: '#6c757d',\n        ok: 'Yes',\n        okColor: '#28a745',\n        cancel: 'No'\n      };\n      if (typeof content === 'object') {\n        // content is a configuration object\n        Object.assign(config, content);\n      } else {\n        // content is just a string\n        config.content = content;\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Show notification\r\n     * \r\n     * @param {String} title - Notification title\r\n     * @param {String} content - Notification content\r\n     * @returns {Promise} - Promise that resolves when notification is closed\r\n     */\n    notify() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      const config = {\n        title: title,\n        icon: 'info',\n        iconColor: '#17a2b8',\n        position: 'top-right',\n        ok: false,\n        cancel: false,\n        timeout: 5000,\n        progress: true\n      };\n      if (typeof content === 'object') {\n        // content is a configuration object\n        Object.assign(config, content);\n      } else {\n        // content is just a string\n        config.content = content;\n      }\n      return this.fire(config);\n    }\n\n    /**\r\n     * Create a new instance with predefined options\r\n     * \r\n     * @param {Object} options - Predefined options\r\n     * @returns {ToastMaster} - New ToastMaster instance\r\n     */\n    mixin() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new ToastMaster(options);\n    }\n  }\n\n  // Create default instance\n  const instance = new ToastMaster();\n\n  // Add static methods\n  const staticMethods = ['fire', 'success', 'error', 'warn', 'info', 'ask', 'notify', 'loading', 'mixin', 'price', 'tag'];\n  staticMethods.forEach(method => {\n    ToastMaster[method] = function () {\n      return instance[method](...arguments);\n    };\n  });\n\n  // Explicitly assign to window/global object\n  if (typeof window !== 'undefined') {\n    window.ToastMaster = ToastMaster;\n    window.Toast = ToastMaster;\n  }\n\n  // CommonJS\n  if ( true && module.exports) {\n    module.exports = ToastMaster;\n  }\n\n  // AMD\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return ToastMaster;\n    }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  }\n\n  // Auto-render tags for elements with class toast-tag-<type>\n  document.addEventListener('DOMContentLoaded', function () {\n    var tagClassRegex = /toast-tag-([a-zA-Z0-9_-]+)/g;\n    var all = document.querySelectorAll('[class*=\"toast-tag-\"]');\n    all.forEach(function (el) {\n      var matches = Array.from(el.classList).map(function (cls) {\n        var m = cls.match(/^toast-tag-([a-zA-Z0-9_-]+)$/);\n        return m ? m[1] : null;\n      }).filter(Boolean);\n      matches.forEach(function (type) {\n        // Avoid duplicate tags\n        if (!el.nextSibling || !el.nextSibling.classList || !el.nextSibling.classList.contains('tm-tag')) {\n          window.Toast.tag(type, '', {\n            target: el.parentNode,\n            position: 'after',\n            selector: null\n          });\n        }\n      });\n    });\n  });\n\n  // --- Custom Tag Auto-render ---\n  (function () {\n    function renderCustomTags() {\n      console.log('[ToastMaster] Running renderCustomTags');\n      var all = document.querySelectorAll('[class*=\"toast-ctag-\"]');\n      console.log('[ToastMaster] Found', all.length, 'elements with toast-ctag-');\n      all.forEach(function (el, idx) {\n        var match = Array.from(el.classList).find(function (cls) {\n          return cls.startsWith('toast-ctag-');\n        });\n        if (match) {\n          var parts = match.split('-');\n          console.log(`[ToastMaster] [${idx}] Processing class:`, match, 'parts:', parts);\n          // Format: toast-ctag-Label-bgcolor-textcolor-radius-width-height-fontsize-padding\n          if (parts.length >= 5) {\n            var label = parts[2];\n            var bgColor = parts[3];\n            var textColor = parts[4];\n            var radius = parts[5] || '12px';\n            var width = parts[6] || '';\n            var height = parts[7] || '';\n            var fontSize = parts[8] || '0.85em';\n            var padding = parts[9] ? parts[9].replace(/_/g, ' ') : '2px 8px';\n            if (/^[0-9a-fA-F]{3}$/.test(bgColor) || /^[0-9a-fA-F]{6}$/.test(bgColor)) {\n              bgColor = '#' + bgColor;\n            }\n            if (/^[0-9a-fA-F]{3}$/.test(textColor) || /^[0-9a-fA-F]{6}$/.test(textColor)) {\n              textColor = '#' + textColor;\n            }\n            console.log(`[ToastMaster] [${idx}] label:`, label, 'bgColor:', bgColor, 'textColor:', textColor, 'radius:', radius, 'width:', width, 'height:', height, 'fontSize:', fontSize, 'padding:', padding);\n            el.style.backgroundColor = bgColor;\n            el.style.color = textColor;\n            el.style.borderRadius = radius;\n            if (width) el.style.width = width;\n            if (height) el.style.height = height;\n            el.style.fontSize = fontSize;\n            el.style.padding = padding;\n            el.style.display = 'inline-block';\n            el.textContent = label;\n          } else {\n            console.warn(`[ToastMaster] [${idx}] Invalid class format for custom tag:`, match);\n          }\n        } else {\n          console.warn(`[ToastMaster] [${idx}] No matching toast-ctag- class found on element`, el);\n        }\n      });\n    }\n    // Expose as static method\n    if (typeof window !== 'undefined' && window.ToastMaster) {\n      window.ToastMaster.renderCustomTags = renderCustomTags;\n    }\n    // Auto-run on DOMContentLoaded\n    document.addEventListener('DOMContentLoaded', renderCustomTags);\n  })();\n})();\n\n//# sourceURL=webpack://toastmaster/./src/ToastMaster.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var module=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n](module,module.exports,__webpack_require__),module.exports}var __webpack_exports__=__webpack_require__("./src/ToastMaster.js")})();