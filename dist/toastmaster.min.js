!function(n,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Toast=t():n.Toast=t()}(this,(()=>(()=>{var __webpack_modules__={"./src/ToastMaster.js":function(module){eval("/**\r\n * ToastMaster.js - A lightweight, customizable modal and toast notification library\r\n * \r\n * @version 1.0.0\r\n * @author SabbirSam\r\n * @license MIT\r\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() : 0;\n})(this, function () {\n  'use strict';\n\n  // Default options for the library\n  const DEFAULT_OPTIONS = {\n    // Basic content\n    title: false,\n    content: false,\n    // Buttons\n    ok: 'OK',\n    okColor: '#2980b9',\n    cancel: 'Cancel',\n    cancelColor: 'transparent',\n    // Appearance\n    icon: 'success',\n    iconColor: '#2980b9',\n    backdrop: 'rgba(0, 0, 0, 0.7)',\n    size: 'sm',\n    position: 'center',\n    animation: 'tilt',\n    darkMode: false,\n    // Behavior\n    backdropClose: true,\n    enterOk: false,\n    escClose: true,\n    bodyClose: false,\n    closeButton: true,\n    timeout: false,\n    progress: false,\n    // Custom classes\n    classes: {\n      modal: '',\n      icon: '',\n      content: '',\n      contentTitle: '',\n      contentText: '',\n      closeButton: '',\n      buttons: '',\n      ok: '',\n      cancel: '',\n      backdrop: '',\n      loading: '',\n      loadingText: '',\n      loadingSpinner: '',\n      progress: ''\n    }\n  };\n\n  // Icons for different states\n  const ICONS = {\n    success: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M22 11.08V12a10 10 0 1 1-5.93-9.14\"></path><polyline points=\"22 4 12 14.01 9 11.01\"></polyline></svg>`,\n    error: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"15\" y1=\"9\" x2=\"9\" y2=\"15\"></line><line x1=\"9\" y1=\"9\" x2=\"15\" y2=\"15\"></line></svg>`,\n    warning: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><path d=\"M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z\"></path><line x1=\"12\" y1=\"9\" x2=\"12\" y2=\"13\"></line><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>`,\n    info: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><line x1=\"12\" y1=\"16\" x2=\"12\" y2=\"12\"></line><line x1=\"12\" y1=\"8\" x2=\"12.01\" y2=\"8\"></line></svg>`,\n    question: `<svg viewBox=\"0 0 24 24\" width=\"40\" height=\"40\" stroke=\"currentColor\" stroke-width=\"2\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3\"></path><line x1=\"12\" y1=\"17\" x2=\"12.01\" y2=\"17\"></line></svg>`,\n    loading: `<div class=\"tm-spinner\"><div></div><div></div><div></div><div></div></div>`\n  };\n\n  // Animation definitions\n  const ANIMATIONS = {\n    tilt: {\n      in: 'tm-animation-tilt-in',\n      out: 'tm-animation-tilt-out'\n    },\n    fadeIn: {\n      in: 'tm-animation-fade-in',\n      out: 'tm-animation-fade-out'\n    },\n    shakeY: {\n      in: 'tm-animation-shake-y',\n      out: 'tm-animation-fade-out'\n    },\n    shakeX: {\n      in: 'tm-animation-shake-x',\n      out: 'tm-animation-fade-out'\n    }\n  };\n\n  // Size definitions\n  const SIZES = {\n    sm: '300px',\n    md: '500px',\n    lg: '700px',\n    xl: '900px',\n    full: '100%'\n  };\n\n  // Position definitions\n  const POSITIONS = {\n    'center': {\n      top: '50%',\n      left: '50%',\n      transform: 'translate(-50%, -50%)'\n    },\n    'top': {\n      top: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'bottom': {\n      bottom: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'left': {\n      top: '50%',\n      left: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'right': {\n      top: '50%',\n      right: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'top-left': {\n      top: '30px',\n      left: '30px'\n    },\n    'top-right': {\n      top: '30px',\n      right: '30px'\n    },\n    'bottom-left': {\n      bottom: '30px',\n      left: '30px'\n    },\n    'bottom-right': {\n      bottom: '30px',\n      right: '30px'\n    },\n    'top-center': {\n      top: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'bottom-center': {\n      bottom: '30px',\n      left: '50%',\n      transform: 'translateX(-50%)'\n    },\n    'left-center': {\n      top: '50%',\n      left: '30px',\n      transform: 'translateY(-50%)'\n    },\n    'right-center': {\n      top: '50%',\n      right: '30px',\n      transform: 'translateY(-50%)'\n    }\n  };\n\n  // Main ToastMaster class\n  class ToastMaster {\n    constructor() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.options = this._mergeOptions(DEFAULT_OPTIONS, options);\n      this.currentModal = null;\n      this.timer = null;\n      this.progressTimer = null;\n      this.isLoading = false;\n      this._injectStyles();\n    }\n\n    /**\r\n     * Merge default options with user options\r\n     * \r\n     * @param {Object} defaultOptions - Default options\r\n     * @param {Object} userOptions - User options\r\n     * @returns {Object} - Merged options\r\n     */\n    _mergeOptions(defaultOptions, userOptions) {\n      const options = {\n        ...defaultOptions\n      };\n      for (const key in userOptions) {\n        if (key === 'classes' && userOptions.classes) {\n          options.classes = {\n            ...options.classes,\n            ...userOptions.classes\n          };\n        } else {\n          options[key] = userOptions[key];\n        }\n      }\n      return options;\n    }\n\n    /**\r\n     * Inject CSS styles into the document\r\n     */\n    _injectStyles() {\n      if (document.getElementById('toast-master-styles')) return;\n      const style = document.createElement('style');\n      style.id = 'toast-master-styles';\n      style.textContent = `\n          .tm-backdrop {\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            z-index: 9999;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n          }\n          \n          .tm-modal {\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);\n            overflow: hidden;\n            position: absolute;\n            max-width: 100%;\n            max-height: 90vh;\n            display: flex;\n            flex-direction: column;\n          }\n          \n          .tm-dark-mode {\n            background-color: #333;\n            color: #fff;\n          }\n          \n          .tm-dark-mode .tm-close-button {\n            color: #fff;\n          }\n          \n          .tm-icon-container {\n            display: flex;\n            justify-content: center;\n            padding: 20px 0 0;\n          }\n          \n          .tm-content {\n            padding: 20px;\n            text-align: center;\n            overflow-y: auto;\n          }\n          \n          .tm-title {\n            font-size: 20px;\n            font-weight: bold;\n            margin-bottom: 10px;\n          }\n          \n          .tm-message {\n            font-size: 16px;\n            margin-bottom: 10px;\n          }\n          \n          .tm-buttons {\n            display: flex;\n            justify-content: center;\n            padding: 15px;\n            gap: 10px;\n          }\n          \n          .tm-button {\n            padding: 8px 16px;\n            border-radius: 4px;\n            cursor: pointer;\n            border: none;\n            font-size: 14px;\n            font-weight: bold;\n            transition: opacity 0.2s;\n          }\n          \n          .tm-button:hover {\n            opacity: 0.8;\n          }\n          \n          .tm-ok-button {\n            color: white;\n          }\n          \n          .tm-cancel-button {\n            background-color: transparent;\n            border: 1px solid #ccc;\n          }\n          \n          .tm-close-button {\n            position: absolute;\n            top: 10px;\n            right: 10px;\n            cursor: pointer;\n            background: none;\n            border: none;\n            font-size: 20px;\n            color: #666;\n            padding: 0;\n            width: 24px;\n            height: 24px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            line-height: 1;\n          }\n          \n          .tm-progress {\n            position: absolute;\n            top: 0;\n            left: 0;\n            height: 4px;\n            background-color: #2980b9;\n            width: 100%;\n            transform-origin: left center;\n            transform: scaleX(0);\n          }\n          \n          .tm-loading {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            justify-content: center;\n            padding: 30px;\n          }\n          \n          .tm-loading-text {\n            margin-top: 15px;\n            font-size: 16px;\n          }\n          \n          .tm-spinner {\n            display: inline-block;\n            position: relative;\n            width: 40px;\n            height: 40px;\n          }\n          \n          .tm-spinner div {\n            box-sizing: border-box;\n            display: block;\n            position: absolute;\n            width: 32px;\n            height: 32px;\n            margin: 4px;\n            border: 4px solid currentColor;\n            border-radius: 50%;\n            animation: tm-spinner 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;\n            border-color: currentColor transparent transparent transparent;\n          }\n          \n          .tm-spinner div:nth-child(1) {\n            animation-delay: -0.45s;\n          }\n          \n          .tm-spinner div:nth-child(2) {\n            animation-delay: -0.3s;\n          }\n          \n          .tm-spinner div:nth-child(3) {\n            animation-delay: -0.15s;\n          }\n          \n          @keyframes tm-spinner {\n            0% { transform: rotate(0deg); }\n            100% { transform: rotate(360deg); }\n          }\n          \n          /* Animation: Tilt */\n          .tm-animation-tilt-in {\n            animation: tm-tilt-in 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;\n          }\n          \n          .tm-animation-tilt-out {\n            animation: tm-tilt-out 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;\n          }\n          \n          @keyframes tm-tilt-in {\n            0% { transform: translateY(-50px) rotate(-8deg); opacity: 0; }\n            100% { transform: translateY(0) rotate(0); opacity: 1; }\n          }\n          \n          @keyframes tm-tilt-out {\n            0% { transform: translateY(0) rotate(0); opacity: 1; }\n            100% { transform: translateY(-50px) rotate(-8deg); opacity: 0; }\n          }\n          \n          /* Animation: Fade */\n          .tm-animation-fade-in {\n            animation: tm-fade-in 0.3s ease-in both;\n          }\n          \n          .tm-animation-fade-out {\n            animation: tm-fade-out 0.3s ease-out both;\n          }\n          \n          @keyframes tm-fade-in {\n            0% { opacity: 0; }\n            100% { opacity: 1; }\n          }\n          \n          @keyframes tm-fade-out {\n            0% { opacity: 1; }\n            100% { opacity: 0; }\n          }\n          \n          /* Animation: ShakeY */\n          .tm-animation-shake-y {\n            animation: tm-shake-y 0.5s cubic-bezier(.36,.07,.19,.97) both;\n          }\n          \n          @keyframes tm-shake-y {\n            0%, 100% { transform: translateY(0); }\n            10%, 30%, 50%, 70%, 90% { transform: translateY(-10px); }\n            20%, 40%, 60%, 80% { transform: translateY(10px); }\n          }\n          \n          /* Animation: ShakeX */\n          .tm-animation-shake-x {\n            animation: tm-shake-x 0.5s cubic-bezier(.36,.07,.19,.97) both;\n          }\n          \n          @keyframes tm-shake-x {\n            0%, 100% { transform: translateX(0); }\n            10%, 30%, 50%, 70%, 90% { transform: translateX(-10px); }\n            20%, 40%, 60%, 80% { transform: translateX(10px); }\n          }\n        `;\n      document.head.appendChild(style);\n    }\n\n    /**\r\n     * Create and show a modal\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    fire() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new Promise(resolve => {\n        // Close any existing modal\n        if (this.currentModal) {\n          this._close();\n        }\n\n        // Merge options\n        const modalOptions = this._mergeOptions(this.options, options);\n\n        // Create modal elements\n        const modal = this._createModal(modalOptions);\n        document.body.appendChild(modal.backdrop);\n\n        // Set up event listeners\n        this._setupEvents(modal, modalOptions, resolve);\n\n        // Handle auto-close timer\n        if (modalOptions.timeout && typeof modalOptions.timeout === 'number') {\n          this._setupTimer(modal, modalOptions.timeout, resolve);\n        }\n\n        // Store current modal\n        this.currentModal = modal;\n\n        // Apply animation\n        this._applyAnimation(modal.modal, modalOptions.animation, 'in');\n      });\n    }\n\n    /**\r\n     * Create modal elements\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {Object} - Modal elements\r\n     */\n    _createModal(options) {\n      // Create backdrop\n      const backdrop = document.createElement('div');\n      backdrop.className = `tm-backdrop ${options.classes.backdrop || ''}`;\n      if (options.backdrop) {\n        backdrop.style.backgroundColor = options.backdrop;\n      }\n\n      // Create modal\n      const modal = document.createElement('div');\n      modal.className = `tm-modal ${options.classes.modal || ''} ${options.darkMode ? 'tm-dark-mode' : ''}`;\n\n      // Set size\n      const size = SIZES[options.size] || options.size;\n      modal.style.width = size;\n\n      // Set position\n      const position = POSITIONS[options.position] || POSITIONS.center;\n      for (const prop in position) {\n        modal.style[prop] = position[prop];\n      }\n\n      // Add content to modal\n      modal.innerHTML = this._getModalContent(options);\n\n      // Append modal to backdrop\n      backdrop.appendChild(modal);\n      return {\n        backdrop,\n        modal\n      };\n    }\n\n    /**\r\n     * Generate modal content HTML\r\n     * \r\n     * @param {Object} options - Modal options\r\n     * @returns {String} - Modal content HTML\r\n     */\n    _getModalContent(options) {\n      let html = '';\n\n      // Add progress bar\n      if (options.progress) {\n        html += `<div class=\"tm-progress ${options.classes.progress || ''}\"></div>`;\n      }\n\n      // Add close button\n      if (options.closeButton) {\n        html += `<button class=\"tm-close-button ${options.classes.closeButton || ''}\">&times;</button>`;\n      }\n\n      // If loading is active, show loading content\n      if (this.isLoading) {\n        html += `\n            <div class=\"tm-loading ${options.classes.loading || ''}\">\n              ${ICONS.loading}\n              <div class=\"tm-loading-text ${options.classes.loadingText || ''}\">${typeof options.loadingText === 'string' ? options.loadingText : 'Please wait...'}</div>\n            </div>\n          `;\n        return html;\n      }\n\n      // Add icon\n      if (options.icon) {\n        html += `\n            <div class=\"tm-icon-container ${options.classes.icon || ''}\">\n              <div style=\"color: ${options.iconColor}\">\n                ${this._getIcon(options.icon)}\n              </div>\n            </div>\n          `;\n      }\n\n      // Add content\n      if (options.title || options.content) {\n        html += `<div class=\"tm-content ${options.classes.content || ''}\">`;\n        if (options.title) {\n          html += `<div class=\"tm-title ${options.classes.contentTitle || ''}\">${options.title}</div>`;\n        }\n        if (options.content) {\n          html += `<div class=\"tm-message ${options.classes.contentText || ''}\">${options.content}</div>`;\n        }\n        html += '</div>';\n      }\n\n      // Add buttons\n      if (options.ok || options.cancel) {\n        html += `<div class=\"tm-buttons ${options.classes.buttons || ''}\">`;\n        if (options.cancel) {\n          html += `\n              <button class=\"tm-button tm-cancel-button ${options.classes.cancel || ''}\" \n                      style=\"color: ${options.cancelColor === 'transparent' ? '#333' : '#fff'}; background-color: ${options.cancelColor};\">\n                ${options.cancel}\n              </button>\n            `;\n        }\n        if (options.ok) {\n          html += `\n              <button class=\"tm-button tm-ok-button ${options.classes.ok || ''}\" \n                      style=\"background-color: ${options.okColor}\">\n                ${options.ok}\n              </button>\n            `;\n        }\n        html += '</div>';\n      }\n      return html;\n    }\n\n    /**\r\n     * Get icon HTML\r\n     * \r\n     * @param {String} icon - Icon type or SVG string\r\n     * @returns {String} - Icon HTML\r\n     */\n    _getIcon(icon) {\n      // Check if it's a predefined icon\n      if (ICONS[icon]) {\n        return ICONS[icon];\n      }\n\n      // Check if it's an SVG string\n      if (icon.trim().startsWith('<svg')) {\n        return icon;\n      }\n\n      // Check if it's an image URL\n      if (icon.match(/\\.(jpeg|jpg|gif|png|svg)$/) || icon.startsWith('data:image')) {\n        return `<img src=\"${icon}\" alt=\"Icon\" style=\"max-width: 80px; max-height: 80px;\">`;\n      }\n\n      // Default to info icon\n      return ICONS.info;\n    }\n\n    /**\r\n     * Set up event listeners for modal\r\n     * \r\n     * @param {Object} modal - Modal elements\r\n     * @param {Object} options - Modal options\r\n     * @param {Function} resolve - Promise resolve function\r\n     */\n    _setupEvents(modal, options, resolve) {\n      // Close button click\n      if (options.closeButton) {\n        const closeButton = modal.modal.querySelector('.tm-close-button');\n        if (closeButton) {\n          closeButton.addEventListener('click', () => {\n            this._close();\n            resolve({\n              close: true\n            });\n          });\n        }\n      }\n\n      // Backdrop click\n      if (options.backdropClose && options.backdrop) {\n        modal.backdrop.addEventListener('click', e => {\n          if (e.target === modal.backdrop) {\n            this._close();\n            resolve({\n              close: true\n            });\n          }\n        });\n      }\n\n      // Body click\n      if (options.bodyClose) {\n        modal.modal.addEventListener('click', () => {\n          this._close();\n          resolve({\n            close: true\n          });\n        });\n      }\n\n      // ESC key press\n      if (options.escClose) {\n        const escHandler = e => {\n          if (e.key === 'Escape') {\n            this._close();\n            resolve({\n              close: true\n            });\n            document.removeEventListener('keydown', escHandler);\n          }\n        };\n        document.addEventListener('keydown', escHandler);\n      }\n\n      // Enter key press\n      if (options.enterOk) {\n        const enterHandler = e => {\n          if (e.key === 'Enter') {\n            this._close();\n            resolve({\n              ok: true\n            });\n            document.removeEventListener('keydown', enterHandler);\n          }\n        };\n        document.addEventListener('keydown', enterHandler);\n      }\n\n      // OK button click\n      const okButton = modal.modal.querySelector('.tm-ok-button');\n      if (okButton) {\n        okButton.addEventListener('click', () => {\n          this._close();\n          resolve({\n            ok: true\n          });\n        });\n      }\n\n      // Cancel button click\n      const cancelButton = modal.modal.querySelector('.tm-cancel-button');\n      if (cancelButton) {\n        cancelButton.addEventListener('click', () => {\n          this._close();\n          resolve({\n            cancel: true\n          });\n        });\n      }\n    }\n\n    /**\r\n     * Set up auto-close timer and progress bar\r\n     * \r\n     * @param {Object} modal - Modal elements\r\n     * @param {Number} timeout - Timeout in milliseconds\r\n     * @param {Function} resolve - Promise resolve function\r\n     */\n    _setupTimer(modal, timeout, resolve) {\n      this.timer = setTimeout(() => {\n        this._close();\n        resolve({\n          timeout: true\n        });\n      }, timeout);\n\n      // Set up progress bar if enabled\n      const progressBar = modal.modal.querySelector('.tm-progress');\n      if (progressBar) {\n        progressBar.style.transition = `transform ${timeout}ms linear`;\n\n        // Use requestAnimationFrame to ensure the initial state is rendered\n        requestAnimationFrame(() => {\n          requestAnimationFrame(() => {\n            progressBar.style.transform = 'scaleX(1)';\n          });\n        });\n      }\n    }\n\n    /**\r\n     * Apply animation to modal\r\n     * \r\n     * @param {HTMLElement} element - Element to animate\r\n     * @param {String} animationName - Animation name\r\n     * @param {String} direction - Animation direction ('in' or 'out')\r\n     */\n    _applyAnimation(element, animationName, direction) {\n      if (!animationName) return;\n      const animation = ANIMATIONS[animationName] || ANIMATIONS.tilt;\n      element.classList.add(animation[direction]);\n      element.addEventListener('animationend', () => {\n        element.classList.remove(animation[direction]);\n      }, {\n        once: true\n      });\n    }\n\n    /**\r\n     * Close the current modal\r\n     */\n    _close() {\n      if (!this.currentModal) return;\n      const {\n        backdrop,\n        modal\n      } = this.currentModal;\n\n      // Clear timers\n      if (this.timer) {\n        clearTimeout(this.timer);\n        this.timer = null;\n      }\n      if (this.progressTimer) {\n        clearTimeout(this.progressTimer);\n        this.progressTimer = null;\n      }\n\n      // Apply exit animation\n      const animationName = this.options.animation;\n      if (animationName) {\n        this._applyAnimation(modal, animationName, 'out');\n        modal.addEventListener('animationend', () => {\n          document.body.removeChild(backdrop);\n        }, {\n          once: true\n        });\n      } else {\n        document.body.removeChild(backdrop);\n      }\n      this.currentModal = null;\n      this.isLoading = false;\n    }\n\n    /**\r\n     * Show or hide loading indicator\r\n     * \r\n     * @param {Boolean|String} state - Loading state or loading text\r\n     * @returns {ToastMaster} - ToastMaster instance for chaining\r\n     */\n    loading() {\n      let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.isLoading = state !== false && state !== null && state !== 0;\n      let loadingText = 'Please wait...';\n      if (typeof state === 'string') {\n        loadingText = state;\n      }\n      if (this.isLoading) {\n        return this.fire({\n          title: false,\n          content: false,\n          icon: false,\n          ok: false,\n          cancel: false,\n          closeButton: false,\n          loadingText: loadingText\n        });\n      } else if (this.currentModal) {\n        this._close();\n      }\n      return this;\n    }\n\n    /**\r\n     * Show success modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {Number|Boolean} timeout - Auto-close timeout\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    success() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4000;\n      return this.fire({\n        title: title,\n        icon: 'success',\n        iconColor: '#28a745',\n        ok: false,\n        cancel: false,\n        timeout: timeout,\n        progress: timeout !== false\n      });\n    }\n\n    /**\r\n     * Show error modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    error() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.fire({\n        title: title,\n        content: content,\n        icon: 'error',\n        iconColor: '#dc3545',\n        ok: 'OK',\n        okColor: '#dc3545',\n        cancel: false\n      });\n    }\n\n    /**\r\n     * Show warning modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    warn() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.fire({\n        title: title,\n        content: content,\n        icon: 'warning',\n        iconColor: '#ffc107',\n        ok: 'OK',\n        okColor: '#ffc107',\n        cancel: false\n      });\n    }\n\n    /**\r\n     * Show info modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    info() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.fire({\n        title: title,\n        content: content,\n        icon: 'info',\n        iconColor: '#17a2b8',\n        ok: 'OK',\n        okColor: '#17a2b8',\n        cancel: false\n      });\n    }\n\n    /**\r\n     * Show question modal\r\n     * \r\n     * @param {String} title - Modal title\r\n     * @param {String} content - Modal content\r\n     * @returns {Promise} - Promise that resolves when modal is closed\r\n     */\n    ask() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.fire({\n        title: title,\n        content: content,\n        icon: 'question',\n        iconColor: '#6c757d',\n        ok: 'Yes',\n        okColor: '#28a745',\n        cancel: 'No'\n      });\n    }\n\n    /**\r\n     * Show notification\r\n     * \r\n     * @param {String} title - Notification title\r\n     * @param {String} content - Notification content\r\n     * @returns {Promise} - Promise that resolves when notification is closed\r\n     */\n    notify() {\n      let title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      let content = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return this.fire({\n        title: title,\n        content: content,\n        icon: 'info',\n        iconColor: '#17a2b8',\n        position: 'top-right',\n        ok: false,\n        cancel: false,\n        timeout: 5000,\n        progress: true\n      });\n    }\n\n    /**\r\n     * Create a new instance with predefined options\r\n     * \r\n     * @param {Object} options - Predefined options\r\n     * @returns {ToastMaster} - New ToastMaster instance\r\n     */\n    mixin() {\n      let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new ToastMaster(options);\n    }\n  }\n\n  // Create default instance\n  const instance = new ToastMaster();\n\n  // Add static methods\n  const staticMethods = ['fire', 'success', 'error', 'warn', 'info', 'ask', 'notify', 'loading', 'mixin'];\n  staticMethods.forEach(method => {\n    ToastMaster[method] = function () {\n      return instance[method](...arguments);\n    };\n  });\n  return ToastMaster;\n});\n\n//# sourceURL=webpack://Toast/./src/ToastMaster.js?")}},__webpack_module_cache__={};function __webpack_require__(n){var t=__webpack_module_cache__[n];if(void 0!==t)return t.exports;var e=__webpack_module_cache__[n]={exports:{}};return __webpack_modules__[n].call(e.exports,e,e.exports,__webpack_require__),e.exports}var __webpack_exports__=__webpack_require__("./src/ToastMaster.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));